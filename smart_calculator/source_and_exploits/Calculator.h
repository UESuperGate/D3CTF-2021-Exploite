#ifndef _CALCULATOR_H_
#define _CALCULATOR_H_

#include <stack>
#include <math.h>
#include <iostream>
#include <sstream>
using namespace std;

class CCalculator
{
public:
    CCalculator(void);
    ~CCalculator(void);

    const float CalcEquation(string &eq);
private:
    CCalculator(const CCalculator &c){}
    void operator=(const CCalculator &c){}

    template<class T> T Operate(T lhs, char op, T rhs) const;


    bool IsOperator(char c) const;                              


    int FindOperatorIdx(char c) const;

    char ComparePriority(char bcp, char cp) const;

    bool OperateDependOnPriority(const char priority, char op);
private:
    typedef struct SOperatorPriority
    {
        char    op;     
        char    pri; 
    }SOP;
    enum EOP    
    {
      EOP_PLUS  = 0,    
      EOP_MINUS = 1,    
      EOP_MULTI = 2,       
      EOP_DIVID = 3,       
      EOP_LBRACKET = 4,    
      EOP_RBRACKET = 5,    
      EOP_SHAP  = 6,       
      EOP_OPCNT = 7,  
    };
    const static SOP        s_OP[EOP_OPCNT];   
    const static char       s_OpPriorityTable[EOP_OPCNT][EOP_OPCNT]; 
    stack<char>             m_OptrStack;        
    stack<float>            m_NumStack;      
    bool                    m_EquationErr;   
};

template<class T> 
T CCalculator::Operate(T lhs, char op, T rhs) const 
{
    switch (op) 
    {
    case '+':
        return lhs + rhs;
    case '-':
        return lhs - rhs;
    case '*':
        return lhs * rhs;
    case '/':
        return abs(rhs-0)<0.000001f ? 0xFFFFFFF : lhs / rhs;
    default:
        cout << "Calc/> Your operator is wrong!" << endl;
        break;
    }
    return T();
}


#endif

