#include "ShareMemory.h"

#include <stdlib.h>
#include <unistd.h>
#include <cstring>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <assert.h>
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <sys/msg.h>
#include <unordered_map>
#include <string>

std::hash<std::string>hasher;

int destory_message_queue(int mq_id) {
    assert(msgctl(mq_id, IPC_RMID, NULL) == 0);
    return 0;
}

void push_cmd(int mq_id, const char* cmd, int len) {
    CmdPacket *p1 = (CmdPacket *)malloc(sizeof(CmdPacket));
    CmdPacket *p2 = (CmdPacket *)malloc(sizeof(CmdPacket) + len + 10);
    memset(p1, 0, sizeof(CmdPacket));
    memset(p2, 0, sizeof(CmdPacket) + len + 10);
    
    p1->size = len;
    p1->mtype = 1;
    msgsnd(mq_id, p1, sizeof(size_t), 0);

    p2->mtype = 2;
    memcpy(p2->buf, cmd, len);

    size_t buf_size = len + sizeof(size_t);
    msgsnd(mq_id, p2, buf_size, 0);
    free(p1);
    free(p2);
}

std::pair<char *, size_t> pop_cmd(int mq_id) {
    CmdPacket *p1 = (CmdPacket *)malloc(sizeof(CmdPacket) + 0x10);
    CmdPacket *p2 = NULL;
    int result = -1;
    while (result == -1) {
        memset(p1, 0, sizeof(CmdPacket) + 0x10);
        msgrcv(mq_id, p1, sizeof(size_t), 1, 0);

        p2 = (CmdPacket *)malloc(sizeof(CmdPacket) + p1->size + 0x10);
        memset(p2, 0, sizeof(CmdPacket) + p1->size + 0x10);
        result = msgrcv(mq_id, p2, p1->size + sizeof(size_t), 2, 0);
        // if (result == -1) {
        //     perror("msgrcv");
        // }
    }
    
    char *t = (char *)malloc(p1->size);
    size_t len = p1->size;
    memset(t, 0, p1->size);
    memcpy(t, p2->buf, p1->size);
    free(p1);
    free(p2);

    return std::pair<char *, size_t>(t, len);

}